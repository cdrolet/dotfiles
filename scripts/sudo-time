#!/usr/bin/env bash

# Quick sudo timeout checker
# Usage: sudo-time
# Put this in your path or create an alias in your .bashrc or .zshrc:
# alias sudo-time='~/path/to/sudo-time'

# ANSI color codes
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
RED='\033[0;31m'
RESET='\033[0m'

# Check if sudo credentials are still valid
if sudo -n true 2>/dev/null; then
    # Credentials are valid! But for how long?
    # We can run 'sudo -v' which updates the timestamp
    # before the command is run
    old_timestamp=$(sudo -V 2>&1 | grep "timestamp file" | cut -d ' ' -f6)
    sudo -v >/dev/null 2>&1
    
    # Find out when sudo will expire
    # This is system-dependent but typically 5 minutes (300 seconds)
    
    # For macOS/BSD, use timeout from sudo defaults
    timeout_value=$(sudo defaults read /etc/sudoers Defaults.timestamp_timeout 2>/dev/null)
    # For Linux systems, try to extract from sudoers (requires NOPASSWD for sudo cat)
    if [ -z "$timeout_value" ]; then
        timeout_value=$(sudo -n cat /etc/sudoers 2>/dev/null | grep -E "^Defaults\s+timestamp_timeout" | awk '{print $3}' | tr -d ',')
    fi
    
    # If we still don't have a value, assume default of 5 minutes
    if [ -z "$timeout_value" ]; then
        timeout_value=5
    fi
    
    minutes=$((timeout_value))
    seconds=$((minutes * 60))
    
    if [[ $minutes -eq 0 ]]; then
        echo -e "${RED}Unlimited (until session ends)${RESET}"
    elif [[ $minutes -eq 1 ]]; then
        echo -e "${YELLOW}~${seconds}s (1 minute)${RESET}"
    else
        echo -e "${GREEN}~${seconds}s (${minutes} minutes)${RESET}"
    fi
else
    echo -e "${RED}Expired${RESET}"
fi 